pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        DOCKER_IMAGE = 'hanoguz00/fastapi-app'
        DOCKER_TAG = 'latest'
        TEST_DEPLOYMENT_FILE = 'test-fastapi-deployment.yaml'  // Test için deployment dosyan
        TEST_SERVICE_FILE = 'test-fastapi-service.yaml'        // Test için service dosyan
        PROD_DEPLOYMENT_FILE = 'prod-fastapi-deployment.yaml'  // Prod için deployment dosyan
        PROD_SERVICE_FILE = 'prod-fastapi-service.yaml'        // Prod için service dosyan
        POSTGRES_DEPLOYMENT_FILE = 'postgres-deployment.yaml'  // PostgreSQL deployment dosyan (ortak)
        POSTGRES_SERVICE_FILE = 'postgres-service.yaml'        // PostgreSQL service dosyan (ortak)
        POSTGRES_PVC_FILE = 'postgres-pvc.yaml'               // PostgreSQL PVC dosyan (ortak)
        INGRESS_FILE = 'ingress.yaml'                         // Ingress dosyan (prod ortamı için kullanılabilir)
        TEST_NAMESPACE = 'test'                               // Test ortam namespace'i
        PROD_NAMESPACE = 'prod'                               // Prod ortam namespace'i
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/KuserOguzHan/pipeline_postgresql_1.git'
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    echo 'Logging into Docker Hub...'
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
                }
            }
        }

        stage('Push Docker Image to Hub') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    sh 'docker push $DOCKER_IMAGE:$DOCKER_TAG'
                }
            }
        }

        stage('Deploy PostgreSQL') {
            steps {
                script {
                    echo 'Deploying PostgreSQL...'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $POSTGRES_PVC_FILE -n $TEST_NAMESPACE'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $POSTGRES_DEPLOYMENT_FILE -n $TEST_NAMESPACE'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $POSTGRES_SERVICE_FILE -n $TEST_NAMESPACE'
                }
            }
        }

        stage('Check PostgreSQL Deployment Status') {
            steps {
                script {
                    echo 'Checking PostgreSQL deployment status...'
                    sh 'kubectl get pods -n $TEST_NAMESPACE'
                    sh 'kubectl get services -n $TEST_NAMESPACE'
                }
            }
        }

        stage('Deploy FastAPI to Test') {
            steps {
                script {
                    echo 'Deploying FastAPI application to Test environment...'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $TEST_DEPLOYMENT_FILE -n $TEST_NAMESPACE'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $TEST_SERVICE_FILE -n $TEST_NAMESPACE'
                }
            }
        }

        stage('Check FastAPI Test Deployment Status') {
            steps {
                script {
                    echo 'Checking FastAPI deployment status in Test environment...'
                    sh 'kubectl get pods -n $TEST_NAMESPACE'
                    sh 'kubectl get services -n $TEST_NAMESPACE'
                }
            }
        }

        stage('Deploy FastAPI to Prod') {
            steps {
                script {
                    echo 'Deploying FastAPI application to Prod environment...'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $PROD_DEPLOYMENT_FILE -n $PROD_NAMESPACE'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $PROD_SERVICE_FILE -n $PROD_NAMESPACE'
                }
            }
        }

        stage('Check FastAPI Prod Deployment Status') {
            steps {
                script {
                    echo 'Checking FastAPI deployment status in Prod environment...'
                    sh 'kubectl get pods -n $PROD_NAMESPACE'
                    sh 'kubectl get services -n $PROD_NAMESPACE'
                }
            }
        }

        stage('Deploy Ingress in Prod') {
            steps {
                script {
                    echo 'Deploying Ingress for FastAPI application in Prod...'
                    sh 'kubectl --kubeconfig=$KUBE_CONFIG apply -f $INGRESS_FILE -n $PROD_NAMESPACE'
                }
            }
        }

        stage('Check Ingress Status') {
            steps {
                script {
                    echo 'Checking Ingress status...'
                    sh 'kubectl get ingress -n $PROD_NAMESPACE'
                }
            }
        }

        stage('Access FastAPI Service in Prod via Minikube') {
            when {
                expression {
                    return sh(script: 'minikube status', returnStatus: true) == 0
                }
            }
            steps {
                script {
                    echo 'Accessing FastAPI service in Prod using Minikube...'
                    sh 'minikube service fastapi -n $PROD_NAMESPACE'
                }
            }
        }
    }
}


pipeline_postgresql_1
│
├
k8s.test/
│   ├── fastapi-deployment-test.yaml
│   ├── fastapi-service-test.yaml
│   ├── postgres-deployment-test.yaml
│   ├── postgres-service-test.yaml
│   └── postgres-pvc-test.yaml
│   └── ingress-test.yaml
k8s.prod/
│   ├── fastapi-deployment-prod.yaml
│   ├── fastapi-service-prod.yaml
│   ├── postgres-deployment-prod.yaml
│   ├── postgres-service-prod.yaml
│   └── postgres-pvc-prod.yaml
    └── ingress-prod.yaml
k8s.app/
│   ├── fastapi-deployment.yaml
│   ├── fastapi-service.yaml
│   ├── postgres-deployment.yaml
│   ├── postgres-service.yaml
│   └── postgres-pvc.yaml
    └── ingress.yaml
.env
database.py
docker-compose.yaml
dockerfile
README.md


^^^^
pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        DOCKER_IMAGE = 'hanoguz00/fastapi-app'
        DOCKER_TAG = 'latest'
        TEST_DEPLOYMENT_FILE = 'k8s.test/fastapi-deployment-test.yaml'  // Test için deployment dosyan
        TEST_SERVICE_FILE = 'k8s.test/fastapi-service-test.yaml'        // Test için service dosyan
        TEST_POSTGRES_DEPLOYMENT_FILE = 'k8s.test/postgres-deployment-test.yaml'  // Test için PostgreSQL deployment dosyan
        TEST_POSTGRES_SERVICE_FILE = 'k8s.test/postgres-service-test.yaml'        // Test için PostgreSQL service dosyan
        TEST_POSTGRES_PVC_FILE = 'k8s.test/postgres-pvc-test.yaml'               // Test için PostgreSQL PVC dosyan
        TEST_INGRESS_FILE = 'k8s.test/ingress-test.yaml'                         // Test ortamı için Ingress dosyan
        PROD_DEPLOYMENT_FILE = 'k8s.prod/fastapi-deployment-prod.yaml'           // Prod için deployment dosyan
        PROD_SERVICE_FILE = 'k8s.prod/fastapi-service-prod.yaml'                 // Prod için service dosyan
        PROD_POSTGRES_DEPLOYMENT_FILE = 'k8s.prod/postgres-deployment-prod.yaml'  // Prod için PostgreSQL deployment dosyan
        PROD_POSTGRES_SERVICE_FILE = 'k8s.prod/postgres-service-prod.yaml'        // Prod için PostgreSQL service dosyan
        PROD_POSTGRES_PVC_FILE = 'k8s.prod/postgres-pvc-prod.yaml'               // Prod için PostgreSQL PVC dosyan
        PROD_INGRESS_FILE = 'k8s.prod/ingress-prod.yaml'                         // Prod ortamı için Ingress dosyan
        TEST_NAMESPACE = 'test'                               // Test ortam namespace'i
        PROD_NAMESPACE = 'prod'                               // Prod ortam namespace'i
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/KuserOguzHan/pipeline_postgresql_1.git'
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    echo 'Logging into Docker Hub...'
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
                }
            }
        }

        stage('Push Docker Image to Hub') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    sh 'docker push $DOCKER_IMAGE:$DOCKER_TAG'
                }
            }
        }

        stage('Deploy PostgreSQL to Test') {
            steps {
                script {
                    echo 'Deploying PostgreSQL in Test environment...'
                    sh 'kubectl apply -f $TEST_POSTGRES_PVC_FILE -n $TEST_NAMESPACE'
                    sh 'kubectl apply -f $TEST_POSTGRES_DEPLOYMENT_FILE -n $TEST_NAMESPACE'
                    sh 'kubectl apply -f $TEST_POSTGRES_SERVICE_FILE -n $TEST_NAMESPACE'
                    echo 'Waiting for PostgreSQL to be ready in Test environment...'
                    sleep 10  // 10 saniye bekleme
                }
            }
        }

        stage('Check PostgreSQL Deployment Status in Test') {
            steps {
                script {
                    echo 'Checking PostgreSQL deployment status in Test environment...'
                    sh 'kubectl get pods -n $TEST_NAMESPACE'
                    sh 'kubectl get services -n $TEST_NAMESPACE'
                }
            }
        }

        stage('Deploy FastAPI to Test') {
            steps {
                script {
                    echo 'Deploying FastAPI application to Test environment...'
                    sh 'kubectl apply -f $TEST_DEPLOYMENT_FILE -n $TEST_NAMESPACE'
                    sh 'kubectl apply -f $TEST_SERVICE_FILE -n $TEST_NAMESPACE'
                    sh 'kubectl apply -f $TEST_INGRESS_FILE -n $TEST_NAMESPACE'
                }
            }
        }

        stage('Check FastAPI Test Deployment Status') {
            steps {
                script {
                    echo 'Checking FastAPI deployment status in Test environment...'
                    sh 'kubectl get pods -n $TEST_NAMESPACE'
                    sh 'kubectl get services -n $TEST_NAMESPACE'
                    sh 'kubectl get ingress -n $TEST_NAMESPACE'
                }
            }
        }

        stage('Deploy PostgreSQL to Prod') {
            steps {
                script {
                    echo 'Deploying PostgreSQL in Prod environment...'
                    sh 'kubectl apply -f $PROD_POSTGRES_PVC_FILE -n $PROD_NAMESPACE'
                    sh 'kubectl apply -f $PROD_POSTGRES_DEPLOYMENT_FILE -n $PROD_NAMESPACE'
                    sh 'kubectl apply -f $PROD_POSTGRES_SERVICE_FILE -n $PROD_NAMESPACE'
                    echo 'Waiting for PostgreSQL to be ready in Prod environment...'
                    sleep 10  // 10 saniye bekleme
                }
            }
        }

        stage('Check PostgreSQL Deployment Status in Prod') {
            steps {
                script {
                    echo 'Checking PostgreSQL deployment status in Prod environment...'
                    sh 'kubectl get pods -n $PROD_NAMESPACE'
                    sh 'kubectl get services -n $PROD_NAMESPACE'
                }
            }
        }

        stage('Deploy FastAPI to Prod') {
            steps {
                script {
                    echo 'Deploying FastAPI application to Prod environment...'
                    sh 'kubectl apply -f $PROD_DEPLOYMENT_FILE -n $PROD_NAMESPACE'
                    sh 'kubectl apply -f $PROD_SERVICE_FILE -n $PROD_NAMESPACE'
                    sh 'kubectl apply -f $PROD_INGRESS_FILE -n $PROD_NAMESPACE'
                }
            }
        }

        stage('Check FastAPI Prod Deployment Status') {
            steps {
                script {
                    echo 'Checking FastAPI deployment status in Prod environment...'
                    sh 'kubectl get pods -n $PROD_NAMESPACE'
                    sh 'kubectl get services -n $PROD_NAMESPACE'
                    sh 'kubectl get ingress -n $PROD_NAMESPACE'
                }
            }
        }

        stage('Access FastAPI Service in Prod via Minikube') {
            when {
                expression {
                    return sh(script: 'minikube status', returnStatus: true) == 0
                }
            }
            steps {
                script {
                    echo 'Accessing FastAPI service via Minikube...'
                    sh 'minikube service fastapi --url -n $PROD_NAMESPACE'
                }
            }
        }
    }
}


apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:11
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: postgres
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc







































